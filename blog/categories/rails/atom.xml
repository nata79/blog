<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Nata, the explorer]]></title>
  <link href="http://andrebarbosa.co/blog/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://andrebarbosa.co/blog/"/>
  <updated>2013-08-16T19:42:17+01:00</updated>
  <id>http://andrebarbosa.co/blog/</id>
  <author>
    <name><![CDATA[André Barbosa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integration tests for web services using RSpec]]></title>
    <link href="http://andrebarbosa.co/blog/2013/08/16/integration-tests-for-web-services-using-rspec/"/>
    <updated>2013-08-16T16:52:00+01:00</updated>
    <id>http://andrebarbosa.co/blog/2013/08/16/integration-tests-for-web-services-using-rspec</id>
    <content type="html"><![CDATA[<p>Recently I had to implement a REST web service for a project in Rails. I've been using RSpec for every kind of tests for a long time but, still, wasn’t sure on what was the best way to use it to test a web service.</p>

<p>Capybara has always been my first choice for integration tests, but it doesn’t make much sense if your views are just plain JSON. Thus, I went for a leaner approach taking advantage of <a href="http://rdoc.info/github/brynary/rack-test/master/Rack/Test/Methods">Rack::Test::Methods</a>.</p>

<p>In this post I will explain my approach to test a web service. I won't get into any details on how the web service in question could or should be implemented.</p>

<h2>Setup</h2>

<p>The first thing to setup is the filesystem. There are infinite ways to do this, I prefer to keep the API tests isolated from the rest of the application.</p>

<pre><code>spec
├── api
│
├── controllers
│
├── factories
│
├── features
│
├── models
│    
├── spec_helper.rb
│
└── support
</code></pre>

<p>I guess it would also make sense to decide to put the tests for your API inside the <code>features</code> folder, but I prefer to create a separate <code>api</code> folder. It just feels cleaner.</p>

<p>There's only one more step to complete the setup. We need the <code>Rack::Test::Methods</code> module in our tests. For convenience let's add it to the <code>spec_helper.rb</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>spec/spec_helper.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;...&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Test</span><span class="o">::</span><span class="no">Methods</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That's it! No more setup needed, let's write some specs!</p>

<h2>Specs</h2>

<p>For the sake of example let's say we are building an application that, for some reason, manages products.</p>

<p>I always create one file for each endpoint. Since we're managing products, there should be an endpoint for products. Therefore there is a spec file named <code>products_spec.rb</code> inside our <code>spec/api</code> folder.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>spec/api/products_spec.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;describe &#39;/</span><span class="n">api</span><span class="o">/</span><span class="n">products</span><span class="err">&#39;</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:api</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The main describe block clearly states that we're describing the <code>/api/products</code> endpoint spec in this file. The describe block as a type of <code>api</code>, the type property is not very important in this case, but it can be used to create filters. More info about that <a href="https://www.relishapp.com/rspec/rspec-core/docs/hooks/filters">here</a>.</p>

<p>Inside the main describe block we can describe the several actions available at this endpoint, like <code>index</code>, <code>show</code>... This is where all the magic happens.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>spec/api/products_spec.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s1">&#39;#index&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span> <span class="p">{</span> <span class="n">get</span> <span class="n">api_products_path</span> <span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  it { last_response.status.should eq 200 }&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">it</span> <span class="s1">&#39;should return 10 products&#39;</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;products = JSON.parse last_response.body</span>
</span><span class='line'><span class="sr">products.count.should eq 10</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>On this example we are testing the index action for the <code>/api/products</code> endpoint. We have a <code>before</code> hook that sends a get request to <code>api_products_path</code>. This means that <code>get api_products_path</code> will execute before each <code>it</code> block.</p>

<p>My favourite part of it is that we have the method <code>last_response</code>. This method returns the response for the last request made in the script and we can use it to access the status of the response, the body, header, etc... All courtesy of <a href="http://rdoc.info/github/brynary/rack-test/master/Rack/Test/Methods">Rack::Test::Methods</a>. You can check the documentation for other methods that you may need.</p>

<p>Because my API always return JSON</p>

<p>Btw, the <code>get</code> method is also part of the <a href="http://rdoc.info/github/brynary/rack-test/master/Rack/Test/Methods">Rack::Test::Methods</a> module. There's also methods for the other types of requests, <code>post</code>, <code>put</code>, <code>patch</code>, <code>delete</code>, etc...</p>

<h2>Conclusion</h2>

<ul>
<li>Integration tests for you API should be isolated from the rest of your test suite;</li>
<li>Each spec file should have the specs for an endpoint;</li>
<li>You don't need a complex framework for this kind of tests, <a href="http://rdoc.info/github/brynary/rack-test/master/Rack/Test/Methods">Rack::Test::Methods</a> works just fine;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Access Levels in Rails]]></title>
    <link href="http://andrebarbosa.co/blog/2013/03/04/access-levels-in-rails/"/>
    <updated>2013-03-04T14:02:00+00:00</updated>
    <id>http://andrebarbosa.co/blog/2013/03/04/access-levels-in-rails</id>
    <content type="html"><![CDATA[<p>Authorization in rails can be achieved in many ways. One of the most popular ways to achieve this is through <a href="https://github.com/ryanb/cancan">can can</a>. With can can, all permissions are defined in a single location, the <code>Ability</code> class.</p>

<p>I'm not a fan of this approach because:</p>

<ul>
<li>I think the controllers should be the ones handling the authorization;</li>
<li>The DSL doesn't offer a lot of flexibility and makes it harder for nested resources;</li>
<li>It's not easy to keep everything organized as the number of resources and access levels increase.</li>
</ul>


<p>There are other approaches and gems to handle authorization in Rails like <a href="https://github.com/stffn/declarative_authorization">declarative authorization</a> and <a href="https://github.com/binarylogic/authlogic">authlogic</a> but they look too complicated and little bit outdated. Nevertheless you should, also, check them out.</p>

<h2>My approach</h2>

<p>In my opinion authorization logic should be in the controllers. My approach is to put actions with different access levels in different controllers nested in different modules and use inheritance between the controllers to avoid duplication.</p>

<p>Next, I'll show an example with a small application where i'll put into practice this approach.</p>

<h3>Message Board</h3>

<p>Message Board is a small app that allows users to create message boards.</p>

<p>A message board is a private space where it's members can post stuff that
will be viewed by the other members.</p>

<p>Any user is allowed to create a new message board. In order to view or post
into a message board, a user has to be invited by one of the message board's
admins. The creator of a message board is automaticaly added as an admin of
the message board. After he or her invites other users to the message board,
he or her can promote any member to admin.</p>

<p>By reading the description of the app, we can already identify three access levels:</p>

<ul>
<li><strong>User</strong> - Any authenticaded user.

<ul>
<li>Can create a new Board.</li>
</ul>
</li>
<li><strong>Board Member</strong> - A user that is a member of given board.

<ul>
<li>Can view the board page.</li>
<li>Can post a new message to the board.</li>
</ul>
</li>
<li><strong>Board Admin</strong> - A user that is an admin member of given board.

<ul>
<li>Can do everything that a Board Member can.</li>
<li>Can add new members to the board.</li>
<li>Can delete messages from the board.</li>
</ul>
</li>
</ul>


<h3>Controllers</h3>

<pre><code>app/controllers
├── BoardAccess
│   ├── Admin
│   │   ├── base_controller.rb
│   │   ├── board_members_controller.rb
│   │   ├── boards_controller.rb
│   │   └── messages_controller.rb
│   ├── Normal
│   │   ├── base_controller.rb
│   │   ├── boards_controller.rb
│   │   └── messages_controller.rb
│   └── board_access_base_controller.rb
├── application_controller.rb
└── boards_controller.rb
</code></pre>

<p>The first access level is public so it's handled by the <code>BoardsController</code> located in <code>app/controllers/boards_controller.rb</code>.</p>

<p>The folder <code>BoardAccess</code> contatins a class <code>BoardAccessBaseController</code> that serves as superclass for every controller in the module <code>BoardAccess</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/board_access/board_access_base_controller.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">BoardAccess</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">BoardAccessBaseController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;before_filter :authenticate_user!</span>
</span><span class='line'><span class="sr">before_filter :load_board</span>
</span><span class='line'><span class="sr">before_filter :control_access!</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  private&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">authenticate_user!</span>
</span><span class='line'>  <span class="n">permission_denied</span> <span class="k">unless</span> <span class="n">user_signed_in?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">load_board</span>
</span><span class='line'>  <span class="nb">id</span> <span class="o">=</span> <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:board_id</span><span class="o">]</span>
</span><span class='line'>    <span class="n">params</span><span class="o">[</span><span class="ss">:board_id</span><span class="o">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="vi">@board</span> <span class="o">=</span> <span class="no">Board</span><span class="o">.</span><span class="n">find</span> <span class="nb">id</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">control_access!</span>
</span><span class='line'>  <span class="n">permission_denied</span> <span class="k">unless</span> <span class="n">grant_access?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">grant_access?</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s1">&#39;Abstract method.&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">redirect_path</span>
</span><span class='line'>  <span class="n">board_path</span> <span class="vi">@board</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here we define three before filters. <code>authenticate_user!</code> makes sure that the user accessing the action is properly authenticated. <code>load_board</code> creates an instance varialble <code>@board</code> with the provided board id. This is possible because every action performed by the controllers who inherit from this class are either related to the boards resource or other resource that is nested under boards. Finaly <code>control_access!</code> checks if the user has permission to perform a given action. It makes use of the <code>grant_access?</code> method that returns true if should be granted access to the current user. This last method should be defined in the <code>BoardAccessBaseController</code> subclasses.</p>

<p>We also have two nested modules, <code>Normal</code> and <code>Admin</code>. Each module represents an access level. Each one of these modules has a <code>BaseController</code> class. These classes implements the <code>grant_access?</code> method left blank in <code>BoardAccessBaseController</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/board_access/normal/base_controller.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../board_access_base_controller.rb&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module BoardAccess</span>
</span><span class='line'><span class="sr">  module Normal&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">BaseController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">BoardAccess</span><span class="p">:</span><span class="ss">:BoardAccessBaseController</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">grant_access?</span>
</span><span class='line'>    <span class="vi">@board</span><span class="o">.</span><span class="n">is_member?</span> <span class="n">current_user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I the case of the <code>Normal</code> module, the <code>BaseController</code> class checks if the <code>current_user</code> is a member of the selected board.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/board_access/admin/base_controller.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../board_access_base_controller.rb&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module BoardAccess</span>
</span><span class='line'><span class="sr">  module Admin&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">BaseController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">BoardAccess</span><span class="p">:</span><span class="ss">:BoardAccessBaseController</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">grant_access?</span>
</span><span class='line'>    <span class="vi">@board</span><span class="o">.</span><span class="n">is_admin?</span> <span class="n">current_user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>On the <code>Admin</code> module, the <code>BaseController</code> class checks if the <code>current_user</code> is an admin of the selected board.</p>

<p>To complete the cycle, let's look at a controller defined within one of these modules. For example the <code>MessagesController</code> nested in the <code>BoardAccess/Normal</code> module.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/board_access/normal/messages_controller.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">BoardAccess</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Normal</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;class MessagesController &amp;lt; BaseController</span>
</span><span class='line'><span class="sr">  def create</span>
</span><span class='line'><span class="sr">    @message = @board.messages.create!(params[:message]){ |m|</span>
</span><span class='line'><span class="sr">      m.board_member = @board.member_from_user current_user</span>
</span><span class='line'><span class="sr">    }</span>
</span><span class='line'><span class="sr">    redirect_to redirect_path</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Thanks to the top hierarchy, in this controller, we don't need any concern about authorization and we can focus on the functional part of the application. The only think that we should take into account, is that the controller should inherit from <code>BaseController</code> instead of <code>ApplicationController</code>.</p>

<h3>Routing</h3>

<p>Now that our controllers are all setup, how do we handle the routing? We can either use namespaces or specify a module directly on the resource. I usualy prefer the second approach because it gives us shorter url's but it depends on the use case.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/routes.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">MessageBoard</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">devise_for</span> <span class="ss">:users</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  resources :boards, only: [:new, :create]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># Normal Board Member Access Level</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:boards</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:show</span><span class="o">]</span><span class="p">,</span> <span class="ss">module</span><span class="p">:</span> <span class="s1">&#39;board_access/normal&#39;</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;resources :messages, only: [:create]</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># Admin Board Member Access Level</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:boards</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:destroy</span><span class="o">]</span><span class="p">,</span> <span class="ss">module</span><span class="p">:</span> <span class="s1">&#39;board_access/admin&#39;</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;resources :messages, only: [:destroy]</span>
</span><span class='line'><span class="sr">resources :board_members, only: [:create]</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
For the Message Board application, I went with the second approach.</p>

<h2>Wrapping up</h2>

<p>What I proposed here was a method to create access levels in a rails application using nested modules and controller inheritance. In the example application we defined a module <code>BoardAccess</code> to wrap the different access levels, namely <code>Normal</code> and <code>Admin</code>. In order to keep ourselves from writing repeated code we added some inheritance to our controllers and we used the top hierarchy classes to handle the authorization process.</p>

<p>PS: You can find the full source code for the Message Board application <a href="https://github.com/nata79/MessageBoard">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Delayed Jobs]]></title>
    <link href="http://andrebarbosa.co/blog/2013/02/09/testing-delayed-jobs/"/>
    <updated>2013-02-09T23:39:00+00:00</updated>
    <id>http://andrebarbosa.co/blog/2013/02/09/testing-delayed-jobs</id>
    <content type="html"><![CDATA[<p>Delayed Job is a Ruby gem that encapsulates the common pattern of asynchronously executing longer tasks in the background.</p>

<p>I use it frequently because it's a very easy way to send long tasks to the background or schedule some task for the future.</p>

<p>In a testing environment you can switch off Delayed Jobs and every task will be executed immediately but sometimes that's not enough if you're scheduling some task that should run in a specific time in the future.</p>

<p>Anyway, it gives some extra peace of mind if my test is scheduling a background job and running it when it’s supposed to. In order to do this I use Timecop to set the current time in my testing environment and an auxiliary method that fetches and runs scheduled jobs.</p>

<p>The first thing to do is installing Timecop. You can do that by simply adding it to your <code>Gemfile</code> and run <code>bundle</code>.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Gemfile  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;timecop&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now let’s create the method to run the delayed jobs. I usually create a module called <code>DelayedJobHelper</code> and put it in <code>spec/support</code> (yes, I’m using RSpec here, if you use a different testing framework, it probably won’t be too hard to make the transition).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>spec/support/delayed_job_helper.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">DelayedJobHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform_jobs</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;Delayed::Job.all.to_a.each do |job|</span>
</span><span class='line'><span class="sr">  if job.run_at &amp;lt;= Time.now</span>
</span><span class='line'><span class="sr">    job.invoke_job</span>
</span><span class='line'><span class="sr">    job.destroy</span>
</span><span class='line'><span class="sr">  end      </span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The method <code>perform_jobs</code> will run through every delayed job in the database, check if it's scheduled to run now or sometime in the past and if that’s true, invoke the job and finally destroy it. To get access to this method in your spec files, you should include the following lines in your <code>spec_helper.rb</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>spec/spec_helper.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;...&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;spec/support/&lt;em&gt;*/&lt;/em&gt;.rb&quot;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span> <span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;RSpec.configure do |config|</span>
</span><span class='line'><span class="sr">  # ...</span>
</span><span class='line'><span class="sr">  config.include(DelayedJobHelper)</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now that we’re all set up let’s see an example of how to test a delayed job.</p>

<p>Let’s say we have a model called Event. An event has a date, a name and many subscribers. Also, an event, after creation, schedules a job to send a notification to every subscriber on the day before the event.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/models/event.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Event</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:date</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  has_many :subscribers&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">after_create</span> <span class="ss">:notify_subscribers</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def notify_subscribers&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">self</span><span class="o">.</span><span class="n">subscribers</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send_notification</span> <span class="ss">:event_tomorrow</span><span class="p">,</span> <span class="nb">self</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'>  <span class="n">handle_asynchronously</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;:notify_subscribers, </span>
</span><span class='line'><span class="sr">run_at: Proc.new { |e| e.date.beginning_of_day - 1.day }</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, let's build a spec for the <code>Event</code> model.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>spec/models/event_spec.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;describe &quot;Event&quot; do</span>
</span><span class='line'><span class="sr">  it &quot;notyfies every subscriber on the day before the event&quot; do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1"># Create an event</span>
</span><span class='line'><span class="n">event</span> <span class="o">=</span> <span class="no">Event</span><span class="o">.</span><span class="n">create</span> <span class="ss">date</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">+</span> <span class="mi">1</span><span class="o">.</span><span class="n">month</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Super Awesome Event&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Add some subscribers</span>
</span><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">times</span><span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">event</span><span class="o">.</span><span class="n">subscribers</span><span class="o">.</span><span class="n">create</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">&quot;subscriber</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">@mail.fake&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="no">Timecop</span><span class="o">.</span><span class="n">freeze</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">beggining_of_day</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">perform_jobs</span>
</span><span class='line'>  <span class="n">event</span><span class="o">.</span><span class="n">subscribers</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">notifications</span><span class="o">.</span><span class="n">exists?</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:event_tomorrow</span><span class="p">,</span> <span class="ss">event</span><span class="p">:</span> <span class="n">event</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Ok! It’s done. Now we can test if any job is being scheduled correctly and executing at the right moment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying a Rails app to AppFog]]></title>
    <link href="http://andrebarbosa.co/blog/2012/10/19/deploying-a-rails-app-to-appfog/"/>
    <updated>2012-10-19T22:02:00+01:00</updated>
    <id>http://andrebarbosa.co/blog/2012/10/19/deploying-a-rails-app-to-appfog</id>
    <content type="html"><![CDATA[<p><a href="http://www.appfog.com/">AppFog</a> is a PaaS similar to <a href="http://www.heroku.com/">Heroku</a> only cheaper. You can have 2GB of RAM for your app for free, which is perfect for small projects.</p>

<p>I won’t go into great detail on what the steps are to deploy your rails app because the folks at AppFog already did that for me. You should check out their documentation at <a href="http://docs.appfog.com">http://docs.appfog.com</a>.</p>

<p>There is just one little thing that I didn’t get from the documentation and took me a while to understand, the content of my <code>database.yml</code> file. AppFog gives you a way to access installed services information (like your database) through an environment variable. In ruby you would access them like this <code>ENV['VCAP_SERVICES']</code>. This will return an hash with information on all your installed services. You have to use this hash to setup your `database.yml file.</p>

<p>So, the production section in your database.yml file should look something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/database.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgresql</span>
</span><span class='line'>  <span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">unicode</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pool</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'>  <span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5000</span>
</span><span class='line'>  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="nl">&amp;lt</span><span class="l-Scalar-Plain">;%= JSON.parse( ENV[&#39;VCAP_SERVICES&#39;] )[&#39;postgres&#39;].first[&#39;credentials&#39;][&#39;hostname&#39;] rescue &#39;localhost&#39; %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="nl">&amp;lt</span><span class="l-Scalar-Plain">;%= JSON.parse( ENV[&#39;VCAP_SERVICES&#39;] )[&#39;postgres&#39;].first[&#39;credentials&#39;][&#39;port&#39;] rescue 3306 %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="nl">&amp;lt</span><span class="l-Scalar-Plain">;%= JSON.parse( ENV[&#39;VCAP_SERVICES&#39;] )[&#39;postgres&#39;].first[&#39;credentials&#39;][&#39;name&#39;] rescue &#39;&#39; %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="nl">&amp;lt</span><span class="l-Scalar-Plain">;%= JSON.parse( ENV[&#39;VCAP_SERVICES&#39;] )[&#39;postgres&#39;].first[&#39;credentials&#39;][&#39;username&#39;] rescue &#39;&#39; %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="nl">&amp;lt</span><span class="l-Scalar-Plain">;%= JSON.parse( ENV[&#39;VCAP_SERVICES&#39;] )[&#39;postgres&#39;].first[&#39;credentials&#39;][&#39;password&#39;] rescue &#39;&#39; %&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>this example uses Postgres but you can easily modify it for your favorite database engine.</p>
]]></content>
  </entry>
  
</feed>
